# Shell 使用文档
## 简介

#Shell 是一个简易的命令行解释器，支持基本的命令执行、I/O 重定向和管道操作。本项目使用了 C++ 标准库和一些 POSIX 系统调用来实现。

你可以直接运行 shell，或提供一个脚本文件作为参数：
示例：
./shell
或
./shell script.txt

## 功能介绍

### 交互模式

在交互模式下，你可以直接在命令行中输入命令并执行。输入 `exit` 命令可以退出 shell。
示例：

Welcome to Shell!
shell> ls -l
shell> cat file.txt
shell> exit

### 脚本模式

你可以将命令写入一个脚本文件，然后让 Shell 执行该脚本文件中的命令。脚本文件中的每一行都是一个要执行的命令。
示例脚本 `script.txt`：

echo "Hello, World!"
ls -l
cat file.txt

执行脚本：

./shell script.txt

### 命令执行

Shell 支持执行基本的系统命令，使用的是 `fork` 和 `execvp` 系统调用。以下是一些常见的命令及其用法：

- `ls`：列出目录内容。
- `cat`：显示文件内容。
- `echo`：打印字符串到终端。
- `grep`：搜索文本中的字符串。
- `cd`：更改当前目录。

### I/O 重定向

支持命令输出重定向到文件和从文件输入。

- 输出重定向 `>`：将命令的输出重定向到文件。

  echo "Hello, World!" > output.txt

- 输入重定向 `<`：从文件读取命令输入。

  cat < input.txt

### 管道

支持使用 `|` 操作符将一个命令的输出作为另一个命令的输入。

ls -l | grep "keyword"

### 环境变量

支持设置和使用环境变量。

- 设置环境变量：

  export VAR_NAME=value

- 使用环境变量：

  echo $VAR_NAME

### 命令历史

Shell 支持简单的命令历史记录，你可以使用上箭头键来浏览之前输入的命令。

### 命令别名

支持定义和使用命令别名。

- 定义别名：

  alias ll="ls -l"

- 使用别名：

  ll

### 后台执行

支持将命令放在后台执行。

sleep 10 &



